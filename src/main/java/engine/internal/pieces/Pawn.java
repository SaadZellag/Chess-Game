package engine.internal.pieces;

import static engine.internal.BitBoard.*;

public interface Pawn {

    // =============== Pushes =============== //
    static long whiteSinglePush(long whitePawns) {
        return whitePawns << 8;
    }

    static long whiteDoublePush(long whitePawns) {
        // Only rank 2 are able to double push
        return (whitePawns & RANK_2) << 8;
    }

    static long blackSinglePush(long blackPawns) {
        return blackPawns >>> 8;
    }

    static long blackDoublePush(long blackPawns) {
        // Only rank 7 are able to double push
        return (blackPawns & RANK_7) >>> 8;
    }
    // =============== Pushes =============== //

    // =============== Attacks =============== //
    static long whiteEastAttack(long whitePawns) {
        return (whitePawns << 7) & ~FILE_A;
    }

    static long whiteWestAttack(long whitePawns) {
        return (whitePawns << 9) & ~FILE_H;
    }

    static long whiteAttack(long whitePawns) {
        return whiteEastAttack(whitePawns) | whiteWestAttack(whitePawns);
    }

    static long blackEastAttack(long blackPawns) {
        return (blackPawns >>> 9) &  ~FILE_A;
    }

    static long blackWestAttack(long blackPawns) {
        return (blackPawns >>> 7) & ~FILE_H;
    }

    static long blackAttack(long blackPawns) {
        return blackEastAttack(blackPawns) | blackWestAttack(blackPawns);
    }
    // =============== Attacks =============== //


    long[] WHITE_ATTACKS = {
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0100000000000000000000000000000000000000000000000000000000000000L,
            0b1010000000000000000000000000000000000000000000000000000000000000L,
            0b0101000000000000000000000000000000000000000000000000000000000000L,
            0b0010100000000000000000000000000000000000000000000000000000000000L,
            0b0001010000000000000000000000000000000000000000000000000000000000L,
            0b0000101000000000000000000000000000000000000000000000000000000000L,
            0b0000010100000000000000000000000000000000000000000000000000000000L,
            0b0000001000000000000000000000000000000000000000000000000000000000L,
            0b0000000001000000000000000000000000000000000000000000000000000000L,
            0b0000000010100000000000000000000000000000000000000000000000000000L,
            0b0000000001010000000000000000000000000000000000000000000000000000L,
            0b0000000000101000000000000000000000000000000000000000000000000000L,
            0b0000000000010100000000000000000000000000000000000000000000000000L,
            0b0000000000001010000000000000000000000000000000000000000000000000L,
            0b0000000000000101000000000000000000000000000000000000000000000000L,
            0b0000000000000010000000000000000000000000000000000000000000000000L,
            0b0000000000000000010000000000000000000000000000000000000000000000L,
            0b0000000000000000101000000000000000000000000000000000000000000000L,
            0b0000000000000000010100000000000000000000000000000000000000000000L,
            0b0000000000000000001010000000000000000000000000000000000000000000L,
            0b0000000000000000000101000000000000000000000000000000000000000000L,
            0b0000000000000000000010100000000000000000000000000000000000000000L,
            0b0000000000000000000001010000000000000000000000000000000000000000L,
            0b0000000000000000000000100000000000000000000000000000000000000000L,
            0b0000000000000000000000000100000000000000000000000000000000000000L,
            0b0000000000000000000000001010000000000000000000000000000000000000L,
            0b0000000000000000000000000101000000000000000000000000000000000000L,
            0b0000000000000000000000000010100000000000000000000000000000000000L,
            0b0000000000000000000000000001010000000000000000000000000000000000L,
            0b0000000000000000000000000000101000000000000000000000000000000000L,
            0b0000000000000000000000000000010100000000000000000000000000000000L,
            0b0000000000000000000000000000001000000000000000000000000000000000L,
            0b0000000000000000000000000000000001000000000000000000000000000000L,
            0b0000000000000000000000000000000010100000000000000000000000000000L,
            0b0000000000000000000000000000000001010000000000000000000000000000L,
            0b0000000000000000000000000000000000101000000000000000000000000000L,
            0b0000000000000000000000000000000000010100000000000000000000000000L,
            0b0000000000000000000000000000000000001010000000000000000000000000L,
            0b0000000000000000000000000000000000000101000000000000000000000000L,
            0b0000000000000000000000000000000000000010000000000000000000000000L,
            0b0000000000000000000000000000000000000000010000000000000000000000L,
            0b0000000000000000000000000000000000000000101000000000000000000000L,
            0b0000000000000000000000000000000000000000010100000000000000000000L,
            0b0000000000000000000000000000000000000000001010000000000000000000L,
            0b0000000000000000000000000000000000000000000101000000000000000000L,
            0b0000000000000000000000000000000000000000000010100000000000000000L,
            0b0000000000000000000000000000000000000000000001010000000000000000L,
            0b0000000000000000000000000000000000000000000000100000000000000000L,
            0b0000000000000000000000000000000000000000000000000100000000000000L,
            0b0000000000000000000000000000000000000000000000001010000000000000L,
            0b0000000000000000000000000000000000000000000000000101000000000000L,
            0b0000000000000000000000000000000000000000000000000010100000000000L,
            0b0000000000000000000000000000000000000000000000000001010000000000L,
            0b0000000000000000000000000000000000000000000000000000101000000000L,
            0b0000000000000000000000000000000000000000000000000000010100000000L,
            0b0000000000000000000000000000000000000000000000000000001000000000L,
    };

    static long getWhiteAttack(long pawn) {
        return WHITE_ATTACKS[Long.numberOfTrailingZeros(pawn)];
    }

    long[] BLACK_ATTACKS = {
            0b0000000001000000000000000000000000000000000000000000000000000000L,
            0b0000000010100000000000000000000000000000000000000000000000000000L,
            0b0000000001010000000000000000000000000000000000000000000000000000L,
            0b0000000000101000000000000000000000000000000000000000000000000000L,
            0b0000000000010100000000000000000000000000000000000000000000000000L,
            0b0000000000001010000000000000000000000000000000000000000000000000L,
            0b0000000000000101000000000000000000000000000000000000000000000000L,
            0b0000000000000010000000000000000000000000000000000000000000000000L,
            0b0000000000000000010000000000000000000000000000000000000000000000L,
            0b0000000000000000101000000000000000000000000000000000000000000000L,
            0b0000000000000000010100000000000000000000000000000000000000000000L,
            0b0000000000000000001010000000000000000000000000000000000000000000L,
            0b0000000000000000000101000000000000000000000000000000000000000000L,
            0b0000000000000000000010100000000000000000000000000000000000000000L,
            0b0000000000000000000001010000000000000000000000000000000000000000L,
            0b0000000000000000000000100000000000000000000000000000000000000000L,
            0b0000000000000000000000000100000000000000000000000000000000000000L,
            0b0000000000000000000000001010000000000000000000000000000000000000L,
            0b0000000000000000000000000101000000000000000000000000000000000000L,
            0b0000000000000000000000000010100000000000000000000000000000000000L,
            0b0000000000000000000000000001010000000000000000000000000000000000L,
            0b0000000000000000000000000000101000000000000000000000000000000000L,
            0b0000000000000000000000000000010100000000000000000000000000000000L,
            0b0000000000000000000000000000001000000000000000000000000000000000L,
            0b0000000000000000000000000000000001000000000000000000000000000000L,
            0b0000000000000000000000000000000010100000000000000000000000000000L,
            0b0000000000000000000000000000000001010000000000000000000000000000L,
            0b0000000000000000000000000000000000101000000000000000000000000000L,
            0b0000000000000000000000000000000000010100000000000000000000000000L,
            0b0000000000000000000000000000000000001010000000000000000000000000L,
            0b0000000000000000000000000000000000000101000000000000000000000000L,
            0b0000000000000000000000000000000000000010000000000000000000000000L,
            0b0000000000000000000000000000000000000000010000000000000000000000L,
            0b0000000000000000000000000000000000000000101000000000000000000000L,
            0b0000000000000000000000000000000000000000010100000000000000000000L,
            0b0000000000000000000000000000000000000000001010000000000000000000L,
            0b0000000000000000000000000000000000000000000101000000000000000000L,
            0b0000000000000000000000000000000000000000000010100000000000000000L,
            0b0000000000000000000000000000000000000000000001010000000000000000L,
            0b0000000000000000000000000000000000000000000000100000000000000000L,
            0b0000000000000000000000000000000000000000000000000100000000000000L,
            0b0000000000000000000000000000000000000000000000001010000000000000L,
            0b0000000000000000000000000000000000000000000000000101000000000000L,
            0b0000000000000000000000000000000000000000000000000010100000000000L,
            0b0000000000000000000000000000000000000000000000000001010000000000L,
            0b0000000000000000000000000000000000000000000000000000101000000000L,
            0b0000000000000000000000000000000000000000000000000000010100000000L,
            0b0000000000000000000000000000000000000000000000000000001000000000L,
            0b0000000000000000000000000000000000000000000000000000000001000000L,
            0b0000000000000000000000000000000000000000000000000000000010100000L,
            0b0000000000000000000000000000000000000000000000000000000001010000L,
            0b0000000000000000000000000000000000000000000000000000000000101000L,
            0b0000000000000000000000000000000000000000000000000000000000010100L,
            0b0000000000000000000000000000000000000000000000000000000000001010L,
            0b0000000000000000000000000000000000000000000000000000000000000101L,
            0b0000000000000000000000000000000000000000000000000000000000000010L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
            0b0000000000000000000000000000000000000000000000000000000000000000L,
    };

    static long getBlackAttack(long pawn) {
        return BLACK_ATTACKS[Long.numberOfTrailingZeros(pawn)];
    }
}
