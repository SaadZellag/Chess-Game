package engine.internal.pieces;

import static engine.internal.BitBoard.*;

public interface Knight {

    // https://www.chessprogramming.org/AVX2#KnightAttacks

	// Lookup table
	// Should not be modified
	long[] ATTACKS = {
			0b0000000000000000000000000000000000000000000000100000010000000000L,
			0b0000000000000000000000000000000000000000000001010000100000000000L,
			0b0000000000000000000000000000000000000000000010100001000100000000L,
			0b0000000000000000000000000000000000000000000101000010001000000000L,
			0b0000000000000000000000000000000000000000001010000100010000000000L,
			0b0000000000000000000000000000000000000000010100001000100000000000L,
			0b0000000000000000000000000000000000000000101000000001000000000000L,
			0b0000000000000000000000000000000000000000010000000010000000000000L,
			0b0000000000000000000000000000000000000010000001000000000000000100L,
			0b0000000000000000000000000000000000000101000010000000000000001000L,
			0b0000000000000000000000000000000000001010000100010000000000010001L,
			0b0000000000000000000000000000000000010100001000100000000000100010L,
			0b0000000000000000000000000000000000101000010001000000000001000100L,
			0b0000000000000000000000000000000001010000100010000000000010001000L,
			0b0000000000000000000000000000000010100000000100000000000000010000L,
			0b0000000000000000000000000000000001000000001000000000000000100000L,
			0b0000000000000000000000000000001000000100000000000000010000000010L,
			0b0000000000000000000000000000010100001000000000000000100000000101L,
			0b0000000000000000000000000000101000010001000000000001000100001010L,
			0b0000000000000000000000000001010000100010000000000010001000010100L,
			0b0000000000000000000000000010100001000100000000000100010000101000L,
			0b0000000000000000000000000101000010001000000000001000100001010000L,
			0b0000000000000000000000001010000000010000000000000001000010100000L,
			0b0000000000000000000000000100000000100000000000000010000001000000L,
			0b0000000000000000000000100000010000000000000001000000001000000000L,
			0b0000000000000000000001010000100000000000000010000000010100000000L,
			0b0000000000000000000010100001000100000000000100010000101000000000L,
			0b0000000000000000000101000010001000000000001000100001010000000000L,
			0b0000000000000000001010000100010000000000010001000010100000000000L,
			0b0000000000000000010100001000100000000000100010000101000000000000L,
			0b0000000000000000101000000001000000000000000100001010000000000000L,
			0b0000000000000000010000000010000000000000001000000100000000000000L,
			0b0000000000000010000001000000000000000100000000100000000000000000L,
			0b0000000000000101000010000000000000001000000001010000000000000000L,
			0b0000000000001010000100010000000000010001000010100000000000000000L,
			0b0000000000010100001000100000000000100010000101000000000000000000L,
			0b0000000000101000010001000000000001000100001010000000000000000000L,
			0b0000000001010000100010000000000010001000010100000000000000000000L,
			0b0000000010100000000100000000000000010000101000000000000000000000L,
			0b0000000001000000001000000000000000100000010000000000000000000000L,
			0b0000001000000100000000000000010000000010000000000000000000000000L,
			0b0000010100001000000000000000100000000101000000000000000000000000L,
			0b0000101000010001000000000001000100001010000000000000000000000000L,
			0b0001010000100010000000000010001000010100000000000000000000000000L,
			0b0010100001000100000000000100010000101000000000000000000000000000L,
			0b0101000010001000000000001000100001010000000000000000000000000000L,
			0b1010000000010000000000000001000010100000000000000000000000000000L,
			0b0100000000100000000000000010000001000000000000000000000000000000L,
			0b0000010000000000000001000000001000000000000000000000000000000000L,
			0b0000100000000000000010000000010100000000000000000000000000000000L,
			0b0001000100000000000100010000101000000000000000000000000000000000L,
			0b0010001000000000001000100001010000000000000000000000000000000000L,
			0b0100010000000000010001000010100000000000000000000000000000000000L,
			0b1000100000000000100010000101000000000000000000000000000000000000L,
			0b0001000000000000000100001010000000000000000000000000000000000000L,
			0b0010000000000000001000000100000000000000000000000000000000000000L,
			0b0000000000000100000000100000000000000000000000000000000000000000L,
			0b0000000000001000000001010000000000000000000000000000000000000000L,
			0b0000000000010001000010100000000000000000000000000000000000000000L,
			0b0000000000100010000101000000000000000000000000000000000000000000L,
			0b0000000001000100001010000000000000000000000000000000000000000000L,
			0b0000000010001000010100000000000000000000000000000000000000000000L,
			0b0000000000010000101000000000000000000000000000000000000000000000L,
			0b0000000000100000010000000000000000000000000000000000000000000000L,
	};


	static long getAttack(final int square) {
		return ATTACKS[square];
	}

	static long getAttacks(long mask) {
		int square;
		long attacks = 0;
		while ((square = Long.numberOfTrailingZeros(mask)) != 64) {
			attacks |= ATTACKS[square];
			mask &= ~(1L << square);
		}
		return attacks;
	}

}
